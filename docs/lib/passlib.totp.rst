.. module:: passlib.totp
    :synopsis: totp / two factor authentaction

=======================================================
:mod:`passlib.totp` -- TOTP / Two Factor Authentication
=======================================================

.. versionadded:: 1.7

The :mod:`!passlib.totp` module provides a number of classes for implementing
two-factor authentication (2FA) using the TOTP [#totpspec]_ specification.
This page provides a reference to all the classes and methods in this module.

Passlib's OTP support is centered around the :class:`TOTP` class.  There are also
some additional helpers, including the :class:`OTPContext` class, which
helps to securely serialize TOTP secrets & state to a database.

.. seealso::

    * :ref:`TOTP Tutorial <totp-tutorial>` --
      overview of this module and walkthrough of how to use it.

.. rst-class:: emphasize-children

.. _baseotp-constructor-options:

TOTP Class
==========

TOTP – Constructor
------------------
.. autoclass:: TOTP(key=None, format="base32", \*, new=False, \*\*kwds)

.. automethod:: TOTP.new()

TOTP – Configuring Encryption & Defaults
----------------------------------------
.. automethod:: TOTP.using

TOTP – Client-Side Token Generation
-----------------------------------
.. automethod:: TOTP.generate

TOTP – Server-Side Token Verification
-------------------------------------
.. automethod:: TOTP.verify

.. todo::

    Offer a resynchronization primitive which allows user to provide a large number of
    sequential tokens taken from a pre-determined time range (e.g.
    google's "emergency recovery code" style); or at current time, but with a much larger
    window (as referenced in the RFC).

.. _baseotp-client-provisioning:

TOTP – Client Provisioning (URIs & QRCodes)
-------------------------------------------
The configuration of any OTP object can be encoded into a URI [#uriformat]_,
suitable for configuring an OTP client such as Google Authenticator.

.. automethod:: TOTP.to_uri
.. automethod:: TOTP.from_uri
.. automethod:: TOTP.pretty_key

.. _baseotp-serialization:

TOTP – Serialization
--------------------
While :class:`TOTP` instances can be used statelessly
to calculate token values, they can also be used in a persistent
manner, to handle tracking of previously used tokens, etc.  In this case,
they will need to be serialized to / from external storage, which
can be performed with the following methods:

.. automethod:: TOTP.to_json
.. automethod:: TOTP.to_dict
.. automethod:: TOTP.from_source
.. automethod:: TOTP.from_json
.. automethod:: TOTP.from_dict

.. attribute:: TOTP.changed

    Boolean flag set by all TOTP methods which modify the internal state.
    if true, then something has changed in the object since it was created / loaded
    via :meth:`~TOTP.from_dict`, and needs re-persisting via :meth:`~TOTP.to_dict`.
    After which, your application may clear the flag, or discard the object, as appropriate.

.. _baseotp-configuration-attributes:

TOTP – Configuration Attributes
-------------------------------
All the OTP objects offer the following attributes,
which correspond to the constructor options (above).
Most of this information will be serialized by :meth:`~TOTP.to_uri` and :meth:`~TOTP.to_json`:

.. autoattribute:: TOTP.key
.. autoattribute:: TOTP.hex_key
.. autoattribute:: TOTP.base32_key
.. autoattribute:: TOTP.label
.. autoattribute:: TOTP.issuer
.. autoattribute:: TOTP.digits
.. autoattribute:: TOTP.alg
.. autoattribute:: TOTP.period

..
    Undocumented Helper Methods
    ---------------------------
    .. automethod:: TOTP.normalize_token
    .. automethod:: TOTP.normalize_time

Support Classes
---------------
.. autoclass:: TotpToken()
.. autoclass:: TotpMatch()

.. rst-class:: emphasize-children

OTPContext (Persistence Frontend)
=================================
.. autoclass:: OTPContext

Support Functions
=================
.. autofunction:: generate_secret(entropy=256)

.. function:: from_uri(uri)

    Create an TOTP instance from a provisioning URI,
    such as generated by :meth:`TOTP.to_uri`.

    :returns:
        :class:`TOTP` instance

.. function:: from_json(json)

    Create an TOTP instance from a JSON string,
    such as generated by :meth:`TOTP.to_json`.
    Also accepts a dict object with the same format,
    such as returned by :meth:`TOTP.to_dict`.

    :returns:
        :class:`TOTP` instance

Deviations
==========

* The TOTP Spec [#totpspec]_ includes an param (``T0``) providing an optional offset from the base time.
  Passlib omits this parameter (fixing it at ``0``), but so do pretty much all other TOTP implementations.

.. rubric:: Footnotes

.. [#totpspec] TOTP Specification - :rfc:`6238`

.. [#hotpspec] HOTP Specification - :rfc:`4226`

.. [#uriformat] Google's OTPAuth URI format -
       `<https://github.com/google/google-authenticator/wiki/Key-Uri-Format>`_

