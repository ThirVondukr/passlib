=======================================================================
:class:`passlib.hash.bigcrypt` - BigCrypt
=======================================================================

.. currentmodule:: passlib.hash

This class implements BigCrypt (a modified version of des-crypt) commonly
found on HP-UX, Digital Unix, and OSF/1. The main difference with
:class:`~passlib.hash.des_crypt` is that bigcrypt
uses all the characters of a password, not just the first 8,
and has a variable length hash string.

.. warning::

    This algorithm is dangerously weak, and should not be used for new applications.
    Not only does it suffer from all of the flaws of :class:`~passlib.hash.des_crypt`,
    but it reveals information about password length and content.

Usage
=====
This class can be used in exactly the same manner as :class:`~passlib.hash.des_crypt`.

Functions
=========
.. autoclass:: bigcrypt

Format
======
An example hash (of ``passphrase``) is ``S/8NbAAlzbYO66hAa9XZyWy2``.
A bigcrypt hash string has the format ``{salt}{checksum_1}{checksum_2...}{checksum_n}`` for some integer ``n>0``, where:

* ``{salt}`` is the salt, stored as a 2 character :func:`hash64 <passlib.utils.h64.encode_int12>`-encoded
  12-bit integer (``S/`` in the example).

* each ``{checksum_i}`` is a separate checksum, stored as an 11 character
  :func:`hash64 <passlib.utils.h64.encode_dc_int64>`-encoded 64-bit integer (``8NbAAlzbYO6`` and ``6hAa9XZyWy2``
  in the example).

* the integer ``n`` (the number of checksums) is determined by the formula
  ``n=min(1, (len(secret)+7)//8)``.

Algorithm
=========
The bigcrypt algorithm is designed to re-use the original des-crypt algorithm:

1. given a password and a 12-bit salt...
2. first the password is null-padded to a non-zero multiple of 8 characters.
3. then a 56-bit DES key is generated from the lower 7 bits of the first 8 characters of the password.
4. the first checksum is generated by :func:`des encrypting <passlib.utils.des.mdes_encrypt_int_block>`
   a 64-bit input block of null data for 25 rounds, using the DES key from step 3,
   and the 12-bit salt from step 1.
5. the 64-bit DES output block is :func:`hash 64 <passlib.utils.h64.encode_dc_int64>`-encoded
   to create the first checksum segment.
6. for each additional 8 characters in the padded password from step 2,
   an additional checksum is generated by repeated steps 3..5 for each
   remaining 8 characters in the password, and then appended
   to the resulting hash. Each repetition of step 4 uses
   the first two characters of the previous checksum as the new salt,
   in place of the salt provided in step 1.

Because of the chained structure, bigcrypt has the property that
the first 13 characters of any bigcrypt hash form a valid :class:`~passlib.hash.des-crypt`
hash of the same password; and bigcrypt hashes of any passwords
less than 9 characters will be identical to des-crypt.

..

    This is also one of it's main flaws:
    each segment of the hash is essentially a separate
    des-crypt hash, which can be attacked in parallel,
    using existing des-crypt attack vectors. Furthermore,
    it reveals information about the length of the encoded
    password, further reducing the keyspace that needs
    to be searched for each of the invididual segments.
    Also, the last segment typically uses only a few
    characters of the passphrase, and once cracked,
    can be used to narrow the overall keyspace.

Deviations
==========
This implementation of bigcrypt differs from others in a few ways:

* Before generating a hash, PassLib encodes unicode passwords using UTF-8.
  The original bigcrypt was designed for 7-bit us-ascii, so this should not
  conflict with most existing hashes. As of this writing, the authors
  know of no specification defining the official behavior that should be used
  in this situtation.

* This implementation currently accepts arbitrarily large passwords,
  producing arbitrarily large hashes. Other implementation have
  various limits on maximum password length (commonly, 128 chars),
  and discard the remaining part of the password.

References
==========
* `<http://www.mail-archive.com/exim-dev@exim.org/msg00970.html>`_ - discussion of bigcrypt & crypt16
