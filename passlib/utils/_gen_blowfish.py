"""passlib._gen_blowfish - meta script that generates _blowfish_unrolled.py"""
#==========================================================================
# imports
#==========================================================================
# core
import os
# pkg
# local
#==========================================================================
# main
#==========================================================================

def main():
    target = os.path.join(os.path.dirname(__file__), "_blowfish_unrolled.py")
    fh = file(target, "w")
    def write(msg, **kwds):
        if kwds:
            msg %= kwds
        fh.write(msg)

    def varlist(name, count):
        return ", ".join(name + str(x) for x in range(count))

    write("""\
\"""passlib.utils._blowfish - helpers for _slow_bcrypt.py, autogenerated by _gen_blowfish.py\"""
#=================================================================
# encipher function
#=================================================================

def bfs_encipher(P, S, l, r):
    \"""blowfish encipher a single 64-bit block encoded as two 32-bit ints\"""

    (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,
      p10, p11, p12, p13, p14, p15, p16, p17) = P
    S0, S1, S2, S3 = S

    l ^= p0

""")

    left = """
        ((((S0[l >> 24] + S1[(l >> 16) & 0xff]) ^ S2[(l >> 8) & 0xff]) +
          S3[l & 0xff]) & 0xffffffff)
    """.strip()
    right = left.replace("l","r")

    def render_encipher(pad=""):
        for i in range(0, 15, 2):
            write("""\
%(pad)s    # Feistel substitution on left word (round %(i)d)
%(pad)s    r ^= %(left)s ^ p%(i1)d

%(pad)s    # Feistel substitution on right word (round %(i1)d)
%(pad)s    l ^= %(right)s ^ p%(i2)d

""", pad=pad, i=i, i1=i+1, i2=i+2, left=left.replace("\n","\n"+pad), right=right.replace("\n","\n"+pad))

    render_encipher()

    write("""\
    return r ^ p17, l

def bfs_repeat_encipher(P, S, l, r, count):
    \"""encipher block of data repeatedly\"""

    (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,
      p10, p11, p12, p13, p14, p15, p16, p17) = P
    S0, S1, S2, S3 = S

    i = 0
    while i < count:

        l ^= p0
""")
    render_encipher(pad=" " * 4)
    write("""\

        l, r = r ^ p17, l
        i += 1

    return l, r

def bfs_expand0_rounds(P, S, pass_keys, salt_keys, rounds):
    \"""optimized version of EKS inner loop, using generator\"""

    p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, \\
      p10, p11, p12, p13, p14, p15, p16, p17 = P
    S0, S1, S2, S3 = S

    rounds <<= 1
    n = 0
    while n < rounds:

        #=============================================================
        # integrate key
        #=============================================================
        keys = salt_keys if n & 1 else pass_keys

""")

    for i in range(18):
        write("""\
        p%(i)d ^= keys[%(i)d]
""", i=i)

    write("""\

        #=============================================================
        # update P
        #=============================================================
        ##i = 0
        ##while i < 18:
        ##    P[i], P[i+1] = l,r = bfs_encipher(P,S,l,r)
        ##    i += 2

        #------------------------------------------------
        # update P[0] and P[1]
        #------------------------------------------------
        l, r = p0, 0

""")
    render_encipher(pad=" " * 4)
    write("""\
        p0, p1 = l, r = r ^ p17, l

""")

    for i in range(2, 18, 2):
        write("""\
        #------------------------------------------------
        # update P[%(i)d] and P[%(i1)d]
        #------------------------------------------------
        l ^= p0

""", i=i, i1=i+1)
        render_encipher(pad=" " * 4)
        write("""\
        p%(i)d, p%(i1)d = l, r = r ^ p17, l

""", i=i, i1=i+1)

    write("""\
        #=============================================================
        # update S
        #=============================================================
        # update S
        ##for box in S:
        ##    j = 0
        ##    while j < 256:
        ##        box[j], box[j+1] = l,r = bfs_encipher(P,S,l,r)
        ##        j += 2

        for box in S:
            j = 0
            while j < 256:
                l ^= p0

""")
    render_encipher(pad=" " * 12)
    write("""\
                box[j], box[j+1] = l, r = r ^ p17, l
                j += 2

        #============================================================
        # next half-round
        #============================================================
        n += 1

    #=============================================================
    # update original P array
    #=============================================================
    P[:] = (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,
      p10, p11, p12, p13, p14, p15, p16, p17)

#=================================================================
# eof
#=================================================================
""")

if __name__ == "__main__":
    main()

#==========================================================================
# eof
#==========================================================================
